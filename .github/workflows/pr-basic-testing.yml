---
name: "Run Python linting and testing"
on:
  pull_request:
    paths:
      - "src/**"
      - "config/**"
      - "requirements.txt"
      - "setup.py"
      - ".github/workflows/*"
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password # pragma: allowlist secret
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install package in development mode
        run: pip install -e .

      - name: Set up test database
        env:
          POSTGRES_PASSWORD: test_password # pragma: allowlist secret
          PGPASSWORD: test_password # pragma: allowlist secret
        run: |
          psql -h localhost -U postgres -d test_db -f sql/database_bootstrap.sql
          psql -h localhost -U postgres -d test_db -f sql/database_indexes.sql

      - name: Lint code with flake8 (except spikes)
        run: |
          tox -e linting

      - name: Lint yaml code
        run: |
          tox -e yaml

      - name: Check if there are any secrets in repo
        run: |
          tox -e detect-secrets

      - name: Run existing tests
        env:
          POSTGRES_PASSWORD: test_password # pragma: allowlist secret
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: test_db
          TEST_DB_USER: postgres
        run: |
          tox -e test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            .coverage
        if: always()
